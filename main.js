!function(){"use strict";var t=class{constructor(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;this.value=t,this.next=null}};const e=new class{constructor(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;this.head=t}getListHead(){return this.head}setListHead(t){this.head=t}getLastListItem(){if(null==this.head)return null;let t=this.head;for(;t.next;)t=t.next;return t}append(e){const n=new t(e);null===this.head?this.head=n:this.getLastListItem().next=n}prepend(e){const n=new t(e);if(null===this.head)this.head=n;else{const t=this.head;n.next=t,this.head=n}}size(){let t=0,e=this.head;for(;null!=e;)t+=1,e=e.next;return t}atIndex(t){if(t<0||null===this.head||null===t)throw new Error("Invalid index");let e=this.head;for(let n=0;n<t;n+=1)if(e=e.next,null===e)throw new Error("Invalid index");return e}pop(){const t=this.size();0!==t&&(1===t?this.head=null:this.atIndex(t-2).next=null)}contains(t){let e=this.head;for(;null!=e;){if(e.value===t)return!0;e=e.next}return!1}find(t){let e=this.head,n=0;for(;null!=e;){if(e.value===t)return n;e=e.next,n+=1}return null}toString(){if(!this.head)return"null";let t="",e=this.head;for(;e;)t+=`( ${e.value} ) -> `,e=e.next;return t+="null",t}}(new t(2));e.append(3),e.append(4),e.append(5),e.prepend(1),console.log(e.toString())}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoieUJBT0EsTUFQQSxNQUNFQSxXQUFBQSxHQUEwQixJQUFkQyxFQUFLQyxVQUFBQyxPQUFBLFFBQUFDLElBQUFGLFVBQUEsR0FBQUEsVUFBQSxHQUFHLEtBQ2xCRyxLQUFLSixNQUFRQSxFQUNiSSxLQUFLQyxLQUFPLElBQ2QsR0NERixNQUNNQyxFQUFPLElDRmIsTUFDRVAsV0FBQUEsR0FBeUIsSUFBYlEsRUFBSU4sVUFBQUMsT0FBQSxRQUFBQyxJQUFBRixVQUFBLEdBQUFBLFVBQUEsR0FBRyxLQUNqQkcsS0FBS0csS0FBT0EsQ0FDZCxDQUVBQyxXQUFBQSxHQUNFLE9BQU9KLEtBQUtHLElBQ2QsQ0FFQUUsV0FBQUEsQ0FBWUMsR0FDVk4sS0FBS0csS0FBT0csQ0FDZCxDQUVBQyxlQUFBQSxHQUNFLEdBQWlCLE1BQWJQLEtBQUtHLEtBQ1AsT0FBTyxLQUVULElBQUlLLEVBQWNSLEtBQUtHLEtBQ3ZCLEtBQU9LLEVBQVlQLE1BQ2pCTyxFQUFjQSxFQUFZUCxLQUU1QixPQUFPTyxDQUNULENBRUFDLE1BQUFBLENBQU9iLEdBQ0wsTUFBTWMsRUFBVSxJQUFJQyxFQUFLZixHQUNQLE9BQWRJLEtBQUtHLEtBRVBILEtBQUtHLEtBQU9PLEVBR0tWLEtBQUtPLGtCQUNiTixLQUFPUyxDQUVwQixDQUVBRSxPQUFBQSxDQUFRaEIsR0FDTixNQUFNYyxFQUFVLElBQUlDLEVBQUtmLEdBQ3pCLEdBQWtCLE9BQWRJLEtBQUtHLEtBRVBILEtBQUtHLEtBQU9PLE1BQ1AsQ0FFTCxNQUFNRyxFQUFZYixLQUFLRyxLQUN2Qk8sRUFBUVQsS0FBT1ksRUFDZmIsS0FBS0csS0FBT08sQ0FDZCxDQUNGLENBRUFJLElBQUFBLEdBQ0UsSUFBSUEsRUFBTyxFQUNQQyxFQUFjZixLQUFLRyxLQUN2QixLQUFzQixNQUFmWSxHQUNMRCxHQUFRLEVBQ1JDLEVBQWNBLEVBQVlkLEtBRTVCLE9BQU9hLENBQ1QsQ0FFQUUsT0FBQUEsQ0FBUUMsR0FDTixHQUFJQSxFQUFRLEdBQW1CLE9BQWRqQixLQUFLRyxNQUEyQixPQUFWYyxFQUNyQyxNQUFNLElBQUlDLE1BQU0saUJBR2xCLElBQUlILEVBQWNmLEtBQUtHLEtBRXZCLElBQUssSUFBSWdCLEVBQUksRUFBR0EsRUFBSUYsRUFBT0UsR0FBSyxFQUU5QixHQURBSixFQUFjQSxFQUFZZCxLQUNOLE9BQWhCYyxFQUNGLE1BQU0sSUFBSUcsTUFBTSxpQkFHcEIsT0FBT0gsQ0FDVCxDQUVBSyxHQUFBQSxHQUNFLE1BQU1DLEVBQWFyQixLQUFLYyxPQUNMLElBQWZPLElBSWUsSUFBZkEsRUFFRnJCLEtBQUtHLEtBQU8sS0FHV0gsS0FBS2dCLFFBQVFLLEVBQWEsR0FDbENwQixLQUFPLEtBRTFCLENBRUFxQixRQUFBQSxDQUFTMUIsR0FDUCxJQUFJWSxFQUFjUixLQUFLRyxLQUN2QixLQUFzQixNQUFmSyxHQUFxQixDQUMxQixHQUFJQSxFQUFZWixRQUFVQSxFQUN4QixPQUFPLEVBRVRZLEVBQWNBLEVBQVlQLElBQzVCLENBQ0EsT0FBTyxDQUNULENBRUFzQixJQUFBQSxDQUFLM0IsR0FDSCxJQUFJWSxFQUFjUixLQUFLRyxLQUNuQmMsRUFBUSxFQUNaLEtBQXNCLE1BQWZULEdBQXFCLENBQzFCLEdBQUlBLEVBQVlaLFFBQVVBLEVBQ3hCLE9BQU9xQixFQUVUVCxFQUFjQSxFQUFZUCxLQUMxQmdCLEdBQVMsQ0FDWCxDQUNBLE9BQU8sSUFDVCxDQUVBTyxRQUFBQSxHQUNFLElBQUt4QixLQUFLRyxLQUNSLE1BQU8sT0FFVCxJQUFJc0IsRUFBYSxHQUNiVixFQUFjZixLQUFLRyxLQUN2QixLQUFPWSxHQUNMVSxHQUFlLEtBQUlWLEVBQVluQixjQUMvQm1CLEVBQWNBLEVBQVlkLEtBRzVCLE9BREF3QixHQUFjLE9BQ1BBLENBQ1QsR0Q5SFksSUFBSWQsRUFBSyxJQUd2QlQsRUFBS08sT0FBTyxHQUNaUCxFQUFLTyxPQUFPLEdBQ1pQLEVBQUtPLE9BQU8sR0FDWlAsRUFBS1UsUUFBUSxHQUViYyxRQUFRQyxJQUFJekIsRUFBS3NCLFciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvbm9kZS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2xpbmtlZExpc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgTm9kZSB7XG4gIGNvbnN0cnVjdG9yKHZhbHVlID0gbnVsbCkge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLm5leHQgPSBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE5vZGU7XG4iLCJpbXBvcnQgTGlua2VkTGlzdCBmcm9tICcuL2xpbmtlZExpc3QnO1xuaW1wb3J0IE5vZGUgZnJvbSAnLi9ub2RlJztcblxuY29uc3Qgbm9kZTEgPSBuZXcgTm9kZSgyKTtcbmNvbnN0IGxpc3QgPSBuZXcgTGlua2VkTGlzdChub2RlMSk7XG5cbmxpc3QuYXBwZW5kKDMpO1xubGlzdC5hcHBlbmQoNCk7XG5saXN0LmFwcGVuZCg1KTtcbmxpc3QucHJlcGVuZCgxKTtcblxuY29uc29sZS5sb2cobGlzdC50b1N0cmluZygpKTtcbiIsImltcG9ydCBOb2RlIGZyb20gJy4vbm9kZSc7XG5cbmNsYXNzIExpbmtlZExpc3Qge1xuICBjb25zdHJ1Y3RvcihoZWFkID0gbnVsbCkge1xuICAgIHRoaXMuaGVhZCA9IGhlYWQ7XG4gIH1cblxuICBnZXRMaXN0SGVhZCgpIHtcbiAgICByZXR1cm4gdGhpcy5oZWFkO1xuICB9XG5cbiAgc2V0TGlzdEhlYWQobmV3SGVhZCkge1xuICAgIHRoaXMuaGVhZCA9IG5ld0hlYWQ7XG4gIH1cblxuICBnZXRMYXN0TGlzdEl0ZW0oKSB7XG4gICAgaWYgKHRoaXMuaGVhZCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgbGV0IGN1cnJlbnRJdGVtID0gdGhpcy5oZWFkO1xuICAgIHdoaWxlIChjdXJyZW50SXRlbS5uZXh0KSB7XG4gICAgICBjdXJyZW50SXRlbSA9IGN1cnJlbnRJdGVtLm5leHQ7XG4gICAgfVxuICAgIHJldHVybiBjdXJyZW50SXRlbTtcbiAgfVxuXG4gIGFwcGVuZCh2YWx1ZSkge1xuICAgIGNvbnN0IG5ld05vZGUgPSBuZXcgTm9kZSh2YWx1ZSk7XG4gICAgaWYgKHRoaXMuaGVhZCA9PT0gbnVsbCkge1xuICAgICAgLy8gSWYgdGhlIGxpc3QgaXMgZW1wdHksIHNldCB0aGUgbmV3IG5vZGUgYXMgdGhlIGhlYWQgb2YgdGhlIGxpc3RcbiAgICAgIHRoaXMuaGVhZCA9IG5ld05vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIHRoZSBsaXN0IGlzIG5vdCBlbXB0eSwgZmluZCB0aGUgbGFzdCBpdGVtIGFuZCBhcHBlbmQgdGhlIG5ldyBub2RlXG4gICAgICBjb25zdCBsYXN0SXRlbSA9IHRoaXMuZ2V0TGFzdExpc3RJdGVtKCk7XG4gICAgICBsYXN0SXRlbS5uZXh0ID0gbmV3Tm9kZTtcbiAgICB9XG4gIH1cblxuICBwcmVwZW5kKHZhbHVlKSB7XG4gICAgY29uc3QgbmV3Tm9kZSA9IG5ldyBOb2RlKHZhbHVlKTtcbiAgICBpZiAodGhpcy5oZWFkID09PSBudWxsKSB7XG4gICAgICAvLyBJZiB0aGUgbGlzdCBpcyBlbXB0eSwgc2V0IHRoZSBuZXcgbm9kZSBhcyB0aGUgaGVhZCBvZiB0aGUgbGlzdFxuICAgICAgdGhpcy5oZWFkID0gbmV3Tm9kZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgdGhlIGxpc3QgaXMgbm90IGVtcHR5LCBmaW5kIHRoZSBmaXJzdCBpdGVtIGFuZCBwcmVwZW5kIHRoZSBuZXcgbm9kZVxuICAgICAgY29uc3QgZmlyc3RJdGVtID0gdGhpcy5oZWFkO1xuICAgICAgbmV3Tm9kZS5uZXh0ID0gZmlyc3RJdGVtO1xuICAgICAgdGhpcy5oZWFkID0gbmV3Tm9kZTtcbiAgICB9XG4gIH1cblxuICBzaXplKCkge1xuICAgIGxldCBzaXplID0gMDtcbiAgICBsZXQgY3VycmVudE5vZGUgPSB0aGlzLmhlYWQ7XG4gICAgd2hpbGUgKGN1cnJlbnROb2RlICE9IG51bGwpIHtcbiAgICAgIHNpemUgKz0gMTtcbiAgICAgIGN1cnJlbnROb2RlID0gY3VycmVudE5vZGUubmV4dDtcbiAgICB9XG4gICAgcmV0dXJuIHNpemU7XG4gIH1cblxuICBhdEluZGV4KGluZGV4KSB7XG4gICAgaWYgKGluZGV4IDwgMCB8fCB0aGlzLmhlYWQgPT09IG51bGwgfHwgaW5kZXggPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBpbmRleCcpO1xuICAgIH1cblxuICAgIGxldCBjdXJyZW50Tm9kZSA9IHRoaXMuaGVhZDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5kZXg7IGkgKz0gMSkge1xuICAgICAgY3VycmVudE5vZGUgPSBjdXJyZW50Tm9kZS5uZXh0O1xuICAgICAgaWYgKGN1cnJlbnROb2RlID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBpbmRleCcpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY3VycmVudE5vZGU7XG4gIH1cblxuICBwb3AoKSB7XG4gICAgY29uc3QgbGlzdExlbmd0aCA9IHRoaXMuc2l6ZSgpO1xuICAgIGlmIChsaXN0TGVuZ3RoID09PSAwKSB7XG4gICAgICAvLyBIYW5kbGUgY2FzZSB3aGVuIHRoZSBsaXN0IGlzIGFscmVhZHkgZW1wdHlcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGxpc3RMZW5ndGggPT09IDEpIHtcbiAgICAgIC8vIEhhbmRsZSBjYXNlIHdoZW4gdGhlIGxpc3QgaGFzIG9ubHkgb25lIGVsZW1lbnRcbiAgICAgIHRoaXMuaGVhZCA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEdlbmVyYWwgY2FzZSBmb3IgbW9yZSB0aGFuIG9uZSBlbGVtZW50XG4gICAgICBjb25zdCBzZWNvbmRMYXN0Tm9kZSA9IHRoaXMuYXRJbmRleChsaXN0TGVuZ3RoIC0gMik7XG4gICAgICBzZWNvbmRMYXN0Tm9kZS5uZXh0ID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBjb250YWlucyh2YWx1ZSkge1xuICAgIGxldCBjdXJyZW50SXRlbSA9IHRoaXMuaGVhZDtcbiAgICB3aGlsZSAoY3VycmVudEl0ZW0gIT0gbnVsbCkge1xuICAgICAgaWYgKGN1cnJlbnRJdGVtLnZhbHVlID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGN1cnJlbnRJdGVtID0gY3VycmVudEl0ZW0ubmV4dDtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZmluZCh2YWx1ZSkge1xuICAgIGxldCBjdXJyZW50SXRlbSA9IHRoaXMuaGVhZDtcbiAgICBsZXQgaW5kZXggPSAwO1xuICAgIHdoaWxlIChjdXJyZW50SXRlbSAhPSBudWxsKSB7XG4gICAgICBpZiAoY3VycmVudEl0ZW0udmFsdWUgPT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICAgIGN1cnJlbnRJdGVtID0gY3VycmVudEl0ZW0ubmV4dDtcbiAgICAgIGluZGV4ICs9IDE7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgaWYgKCF0aGlzLmhlYWQpIHtcbiAgICAgIHJldHVybiAnbnVsbCc7XG4gICAgfVxuICAgIGxldCBzdHJpbmdMaXN0ID0gJyc7XG4gICAgbGV0IGN1cnJlbnROb2RlID0gdGhpcy5oZWFkO1xuICAgIHdoaWxlIChjdXJyZW50Tm9kZSkge1xuICAgICAgc3RyaW5nTGlzdCArPSBgKCAke2N1cnJlbnROb2RlLnZhbHVlfSApIC0+IGA7XG4gICAgICBjdXJyZW50Tm9kZSA9IGN1cnJlbnROb2RlLm5leHQ7XG4gICAgfVxuICAgIHN0cmluZ0xpc3QgKz0gJ251bGwnO1xuICAgIHJldHVybiBzdHJpbmdMaXN0O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IExpbmtlZExpc3Q7XG4iXSwibmFtZXMiOlsiY29uc3RydWN0b3IiLCJ2YWx1ZSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsInRoaXMiLCJuZXh0IiwibGlzdCIsImhlYWQiLCJnZXRMaXN0SGVhZCIsInNldExpc3RIZWFkIiwibmV3SGVhZCIsImdldExhc3RMaXN0SXRlbSIsImN1cnJlbnRJdGVtIiwiYXBwZW5kIiwibmV3Tm9kZSIsIk5vZGUiLCJwcmVwZW5kIiwiZmlyc3RJdGVtIiwic2l6ZSIsImN1cnJlbnROb2RlIiwiYXRJbmRleCIsImluZGV4IiwiRXJyb3IiLCJpIiwicG9wIiwibGlzdExlbmd0aCIsImNvbnRhaW5zIiwiZmluZCIsInRvU3RyaW5nIiwic3RyaW5nTGlzdCIsImNvbnNvbGUiLCJsb2ciXSwic291cmNlUm9vdCI6IiJ9